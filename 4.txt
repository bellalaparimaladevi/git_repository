package yg.bootcamp.demo.userregistration;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

class UserRegistrationServiceTest {

    @Mock
    private UserRegistrationRepository userrepository;

    @InjectMocks
    private UserRegistrationService userRegistrationService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    // Test for getAllUsersRegistered()
    @Test
    void testGetAllUsersRegistered() {
        Iterable<UserRegistration> userList = mock(Iterable.class);  // Mocking the Iterable result

        // Mock repository behavior
        when(userrepository.findAll()).thenReturn(userList);

        // Call the service method
        Iterable<UserRegistration> result = userRegistrationService.getAllUsersRegistered();

        // Verify and assert the result
        verify(userrepository, times(1)).findAll();
        assertNotNull(result);
        assertEquals(userList, result);
    }

    // Test for addNewUsersRegistered()
    @Test
    void testAddNewUsersRegistered() {
        UserRegistration userRegistration = new UserRegistration(); // Create a test object

        // Mock repository behavior for save()
        when(userrepository.save(userRegistration)).thenReturn(userRegistration);

        // Call the service method
        userRegistrationService.addNewUsersRegistered(userRegistration);

        // Verify that the save method is called once
        verify(userrepository, times(1)).save(userRegistration);
    }

    // Test for getUserRegisteredByEmail()
    @Test
    void testGetUserRegisteredByEmail() {
        String userEmail = "test@example.com";
        Optional<UserRegistration> optionalUser = Optional.of(new UserRegistration()); // Create a test object

        // Mock repository behavior for findByUseremail()
        when(userrepository.findByUseremail(userEmail)).thenReturn(optionalUser);

        // Call the service method
        Optional<UserRegistration> result = userRegistrationService.getUserRegisteredByEmail(userEmail);

        // Verify and assert the result
        verify(userrepository, times(1)).findByUseremail(userEmail);
        assertTrue(result.isPresent());
        assertEquals(optionalUser, result);
    }

    // Test case where the user is not found
    @Test
    void testGetUserRegisteredByEmail_UserNotFound() {
        String userEmail = "nonexistent@example.com";

        // Mock repository behavior for user not found
        when(userrepository.findByUseremail(userEmail)).thenReturn(Optional.empty());

        // Call the service method
        Optional<UserRegistration> result = userRegistrationService.getUserRegisteredByEmail(userEmail);

        // Verify and assert the result
        verify(userrepository, times(1)).findByUseremail(userEmail);
        assertFalse(result.isPresent());
    }
}
