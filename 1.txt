import { Component, OnDestroy, OnInit } from '@angular/core';

@Component({
  selector: 'mme-ccr-monitoring',
  templateUrl: './ccr-monitoring.component.html',
  styleUrls: ['./ccr-monitoring.component.scss'],
})
export class CcrMonitoringComponent implements OnInit, OnDestroy {
  private observer: MutationObserver | null = null;

  ngOnInit(): void {
    this.loadBootstrapV4Styles();
    this.setupVisibilityWatcher();
  }

  ngOnDestroy(): void {
    this.observer?.disconnect();
    this.restoreBootstrapV5Styles(); // If needed
  }

  private loadBootstrapV4Styles(): void {
    (window as any).SGWTWidgetConfiguration = {
      sharedCssUrls: [
        'https://shared.sgmarkets.com/sg-bootstrap/v4/4.32.0/sg-bootstrap-standard.min.css',
        'https://shared.fr.world.socgen/sg-bootstrap/v4/icons/index.min.css',
      ],
    };
  }

  private restoreBootstrapV5Styles(): void {
    (window as any).SGWTWidgetConfiguration = {
      sharedCssUrls: [
        'https://shared.sgmarkets.com/sg-bootstrap/v5/5.42.0/sg-bootstrap-standard.min.css',
        'https://shared.fr.world.socgen/sg-bootstrap/v5/5.42.0/icons/index.min.css',
      ],
    };
  }

  private setupVisibilityWatcher(): void {
    const target = document.querySelector('mme-ccr-monitoring');
    if (!target) return;

    this.observer = new MutationObserver(() => {
      const isVisible = (target as HTMLElement).offsetParent !== null;
      if (isVisible) {
        this.loadBootstrapV4Styles(); // Reapply styles when tab becomes active
      }
    });

    this.observer.observe(target, { attributes: true, attributeFilter: ['style', 'class'] });
  }
}
