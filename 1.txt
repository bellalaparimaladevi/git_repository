import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import yg.bootcamp.demo.userdetails.UserDetails;
import yg.bootcamp.demo.userdetails.UserDetailsService;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

class UserDetailsControllerTest {

    @Mock
    private UserDetailsService service;

    @InjectMocks
    private UserDetailsController controller;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllUserDetails() {
        // Given
        List<UserDetails> userDetailsList = List.of(new UserDetails(), new UserDetails());
        when(service.getAllUserDetails()).thenReturn(userDetailsList);

        // When
        Iterable<UserDetails> result = controller.getAllUserDetails();

        // Then
        assertEquals(userDetailsList, result);
        verify(service).getAllUserDetails();
    }

    @Test
    void testAddNewUserDetail() {
        // Given
        UserDetails userDetails = new UserDetails();

        // When
        controller.addNewUserDetail(userDetails);

        // Then
        verify(service).addNewUserDetail(userDetails);
    }

    @Test
    void testUpdateUserStatus() {
        // Given
        Map<String, String> request = new HashMap<>();
        request.put("status", "applied");
        UserDetails updatedUser = new UserDetails();
        when(service.updateUserStatus(1, "applied")).thenReturn(updatedUser);

        // When
        ResponseEntity<UserDetails> response = controller.updateUserStatus(1, request);

        // Then
        assertEquals(ResponseEntity.ok(updatedUser), response);
