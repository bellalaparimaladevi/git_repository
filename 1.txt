package yg.bootcamp.demo.userdetails;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.Optional;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

class UserDetailsServiceTest {

    @InjectMocks
    private UserDetailsService userDetailsService;

    @Mock
    private UserDetailsRepository userRepository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    // Test: getAllUserDetails
    @Test
    void testGetAllUserDetails() {
        // Arrange
        Iterable<UserDetails> mockUserDetails = mock(Iterable.class);
        when(userRepository.findAll()).thenReturn(mockUserDetails);

        // Act
        Iterable<UserDetails> result = userDetailsService.getAllUserDetails();

        // Assert
        assertNotNull(result);
        verify(userRepository, times(1)).findAll();
    }

    // Test: addNewUserDetail
    @Test
    void testAddNewUserDetail() {
        // Arrange
        UserDetails user = new UserDetails();
        doNothing().when(userRepository).save(user);

        // Act
        userDetailsService.addNewUserDetail(user);

        // Assert
        verify(userRepository, times(1)).save(user);
    }

    // Test: updateUserStatus
    @Test
    void testUpdateUserStatus() {
        // Arrange
        UserDetails mockUser = new UserDetails();
        mockUser.setStatus("pending");

        when(userRepository.findById(anyInt())).thenReturn(Optional.of(mockUser));
        when(userRepository.save(any(UserDetails.class))).thenReturn(mockUser);

        // Act
        UserDetails updatedUser = userDetailsService.updateUserStatus(1, "applied");

        // Assert
        assertNotNull(updatedUser);
        assertEquals("applied", updatedUser.getStatus());
        verify(userRepository, times(1)).findById(1);
        verify(userRepository, times(1)).save(mockUser);
    }

    // Test: getAllUsersByJobdetailsJobId
    @Test
    void testGetAllUsersByJobdetailsJobId() {
        // Arrange
        List<UserDetails> mockUserList = mock(List.class);
        when(userRepository.findByjobdetails_jobid(anyInt())).thenReturn(mockUserList);

        // Act
        List<UserDetails> result = userDetailsService.getAllUsersByjobdetails_jobid(1);

        // Assert
        assertNotNull(result);
        verify(userRepository, times(1)).findByjobdetails_jobid(1);
    }

    // Test: addNewUserByJobId
    @Test
    void testAddNewUserByJobId() {
        // Arrange
        UserDetails user = new UserDetails();
        doNothing().when(userRepository).save(user);

        // Act
        userDetailsService.addNewUserbyJobId(user);

        // Assert
        verify(userRepository, times(1)).save(user);
    }
}
