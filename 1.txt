import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { HomeComponent } from './home.component';

describe('HomeComponent', () => {
  let component: HomeComponent;
  let fixture: ComponentFixture<HomeComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [HomeComponent],
      imports: [ReactiveFormsModule],
    }).compileComponents();

    fixture = TestBed.createComponent(HomeComponent);
    component = fixture.componentInstance;

    fixture.detectChanges();
  });

  it('should create the component', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize the form with empty values', () => {
    expect(component.userForm.value).toEqual({
      username: '',
      email: '',
      password: '',
    });
    expect(component.userForm.valid).toBeFalse();
  });

  it('should validate the form as invalid when empty', () => {
    expect(component.userForm.invalid).toBeTrue();
  });

  it('should validate the form as valid when filled with valid data', () => {
    component.userForm.patchValue({
      username: 'testuser',
      email: 'testuser@example.com',
      password: 'password123',
    });

    expect(component.userForm.valid).toBeTrue();
  });

  it('should log form data on submit when the form is valid', () => {
    spyOn(console, 'log');
    component.userForm.patchValue({
      username: 'testuser',
      email: 'testuser@example.com',
      password: 'password123',
    });

    component.onSubmit();

    expect(console.log).toHaveBeenCalledWith({
      username: 'testuser',
      email: 'testuser@example.com',
      password: 'password123',
    });
  });

  it('should not log anything if the form is invalid on submit', () => {
    spyOn(console, 'log');
    component.userForm.patchValue({
      username: '',
      email: '',
      password: '',
    });

    component.onSubmit();

    expect(console.log).not.toHaveBeenCalled();
  });
});
