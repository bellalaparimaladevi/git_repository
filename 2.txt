import { Component, OnInit, OnDestroy } from '@angular/core';
import { GithubService } from '../github.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-view',
  templateUrl: './view.component.html',
  styleUrls: ['./view.component.scss'],
})
export class ViewComponent implements OnInit, OnDestroy {
  message = 'Welcome to GitHub User Search!';
  userName: string = '';
  response: any = null;
  recentSearches: string[] = [];
  filteredSearches: string[] = [];
  showSuggestions: boolean = false;

  private subscription: Subscription = new Subscription();

  constructor(private githubService: GithubService) {}

  ngOnInit(): void {
    // Subscribe to the search term from the service
    this.subscription.add(
      this.githubService.searchTerm$.subscribe((term) => {
        this.userName = term; // Automatically update userName when the search term changes
        this.updateRecentSearches(); // Update filtered suggestions
      })
    );
  }

  search() {
    if (!this.userName.trim()) {
      alert('Please enter a valid username!');
      return;
    }

    this.githubService.getUser(this.userName).subscribe(
      (data: any) => {
        this.response = data;

        // Add to recent searches if not already present
        if (!this.recentSearches.includes(this.userName)) {
          this.recentSearches.unshift(this.userName);
        }

        // Limit recent searches to 5
        if (this.recentSearches.length > 5) {
          this.recentSearches.pop();
        }

        // Update the search term in the service
        this.githubService.setSearchTerm(this.userName);
      },
      (error) => {
        alert('User not found or an error occurred!');
        this.response = null;
      }
    );
  }

  updateRecentSearches() {
    this.filteredSearches = this.recentSearches.filter((search) =>
      search.toLowerCase().includes(this.userName.toLowerCase())
    );
  }

  selectRecentSearch(search: string) {
    this.githubService.setSearchTerm(search); // Set the selected search term
    this.search(); // Perform the search
    this.showSuggestions = false;
  }

  hideSuggestions() {
    setTimeout(() => (this.showSuggestions = false), 100);
  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe(); // Clean up subscriptions
  }
}
