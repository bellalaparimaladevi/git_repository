package yg.bootcamp.demo.jobdetails;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Arrays;
import java.util.Optional;

public class JobDetailsServiceTest {

    @Mock
    private JobDetailsRepository repository;

    @InjectMocks
    private JobDetailsService jobDetailsService;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetAllJobDetails() {
        JobDetails job1 = new JobDetails(); // Initialize with required fields
        JobDetails job2 = new JobDetails(); // Initialize with required fields
        when(repository.findAll()).thenReturn(Arrays.asList(job1, job2));

        Iterable<JobDetails> jobDetails = jobDetailsService.getAllJobDetails();

        assertNotNull(jobDetails);
        assertEquals(2, ((List<JobDetails>) jobDetails).size());
        verify(repository, times(1)).findAll();
    }

    @Test
    void testAddNewJobDetail() {
        JobDetails jobDetails = new JobDetails(); // Initialize with required fields
        doNothing().when(repository).save(jobDetails);

        jobDetailsService.addNewJobDetail(jobDetails);

        verify(repository, times(1)).save(jobDetails);
    }

    @Test
    void testDeleteJobDetailsById() {
        Integer id = 1; // Sample ID
        doNothing().when(repository).deleteById(id);

        jobDetailsService.deleteJobDetailsById(id);

        verify(repository, times(1)).deleteById(id);
    }

    @Test
    void testGetJobDetailsByJobType() {
        String jobType = "Developer"; // Sample job type
        JobDetails job = new JobDetails(); // Initialize with required fields
        when(repository.findByJobtypeIgnoreCase(jobType)).thenReturn(Arrays.asList(job));

        List<JobDetails> result = jobDetailsService.getJobDetailsByJobType(jobType);

        assertNotNull(result);
        assertEquals(1, result.size());
        verify(repository, times(1)).findByJobtypeIgnoreCase(jobType);
    }

    @Test
    void testGetJobDetailsByJobRole() {
        String jobRole = "Backend"; // Sample job role
        JobDetails job = new JobDetails(); // Initialize with required fields
        when(repository.findByJobroleIgnoreCase(jobRole)).thenReturn(Arrays.asList(job));

        List<JobDetails> result = jobDetailsService.getJobDetailsByJobRole(jobRole);

        assertNotNull(result);
        assertEquals(1, result.size());
        verify(repository, times(1)).findByJobroleIgnoreCase(jobRole);
    }

    @Test
    void testUpdateJobDetailsById() {
        JobDetails jobDetails = new JobDetails(); // Initialize with required fields
        doNothing().when(repository).save(jobDetails);

        jobDetailsService.updateJobDetailsById(jobDetails);

        verify(repository, times(1)).save(jobDetails);
    }

    @Test
    void testGetJobDetailsById() {
        Integer id = 1; // Sample ID
        JobDetails job = new JobDetails(); // Initialize with required fields
        when(repository.findById(id)).thenReturn(Optional.of(job));

        Optional<JobDetails> result = jobDetailsService.getJobDetailsById(id);

        assertTrue(result.isPresent());
        assertEquals(job, result.get());
        verify(repository, times(1)).findById(id);
    }
}
